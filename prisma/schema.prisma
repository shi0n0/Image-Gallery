generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id          String @id @default(dbgenerated("uuid_generate_v4()"))
  url         String
  userId      String
  title       String
  description String
  width       Int
  height      Int
  postedAt    DateTime  @default(now())
  viewCount   Int       @default(0)
  likes  Like[]
  comments    Comment[]
  tags        TagToImage[]
  user        User   @relation(fields: [userId], references: [id])
}

model Like {
  id      String   @id @default(dbgenerated("uuid_generate_v4()"))
  userId  String
  imageId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image   Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  @@unique([userId, imageId])
}

model Comment {
  id       String   @id @default(dbgenerated("uuid_generate_v4()"))
  text     String
  userId   String
  imageId  String
  postedAt DateTime @default(now())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model Tag {
  id     String  @id @default(dbgenerated("uuid_generate_v4()"))
  tagName   String
  images    TagToImage[]
}

model TagToImage {
  imageId String
  tagId   String
  image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id])
  @@id([imageId, tagId])
}

model Header {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  url    String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model TopPageSlider {
  id String @id @default(dbgenerated("uuid_generate_v4()"))
  image String
  url String
  createdAt  DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  headers       Header[]
  images        Image[]
  likes  Like[]
  comments      Comment[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
